[
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "session_state",
        "importPath": "streamlit",
        "description": "streamlit",
        "isExtraImport": true,
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "session_state",
        "importPath": "streamlit",
        "description": "streamlit",
        "isExtraImport": true,
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "admin",
        "description": "admin",
        "peekOfCode": "def signup(json_file_path=\"admin.json\"):\n    st.title(\"Signup Page\")\n    with st.form(\"signup_form\"):\n        st.write(\"Fill in the details below to create an account:\")\n        name = st.text_input(\"Name:\")\n        email = st.text_input(\"Email:\")\n        age = st.number_input(\"Age:\", min_value=0, max_value=120)\n        sex = st.radio(\"Sex:\", (\"Male\", \"Female\", \"Other\"))\n        password = st.text_input(\"Password:\", type=\"password\")\n        confirm_password = st.text_input(\"Confirm Password:\", type=\"password\")",
        "detail": "admin",
        "documentation": {}
    },
    {
        "label": "check_login",
        "kind": 2,
        "importPath": "admin",
        "description": "admin",
        "peekOfCode": "def check_login(username, password, json_file_path=\"admin.json\"):\n    try:\n        with open(json_file_path, \"r\") as json_file:\n            data = json.load(json_file)\n        for user in data[\"admins\"]:\n            if user[\"email\"] == username and user[\"password\"] == password:\n                session_state[\"logged_in\"] = True\n                session_state[\"user_info\"] = user\n                st.success(\"Login successful!\")\n                return user",
        "detail": "admin",
        "documentation": {}
    },
    {
        "label": "initialize_database",
        "kind": 2,
        "importPath": "admin",
        "description": "admin",
        "peekOfCode": "def initialize_database(json_file_path=\"admin.json\"):\n    try:\n        if not os.path.exists(json_file_path):\n            data = {\"admins\": []}\n            with open(json_file_path, \"w\") as json_file:\n                json.dump(data, json_file)\n    except Exception as e:\n        print(f\"Error initializing database: {e}\")\ndef create_account(\n    name,",
        "detail": "admin",
        "documentation": {}
    },
    {
        "label": "create_account",
        "kind": 2,
        "importPath": "admin",
        "description": "admin",
        "peekOfCode": "def create_account(\n    name,\n    email,\n    age,\n    sex,\n    password,\n    json_file_path=\"admin.json\",\n):\n    try:\n        # Check if the JSON file exists or is empty",
        "detail": "admin",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "admin",
        "description": "admin",
        "peekOfCode": "def login(json_file_path=\"admin.json\"):\n    st.title(\"Login Page\")\n    username = st.text_input(\"Username:\")\n    password = st.text_input(\"Password:\", type=\"password\")\n    login_button = st.button(\"Login\")\n    if login_button:\n        user = check_login(username, password, json_file_path)\n        if user is not None:\n            session_state[\"logged_in\"] = True\n            session_state[\"user_info\"] = user",
        "detail": "admin",
        "documentation": {}
    },
    {
        "label": "get_user_info",
        "kind": 2,
        "importPath": "admin",
        "description": "admin",
        "peekOfCode": "def get_user_info(email, json_file_path=\"admin.json\"):\n    try:\n        with open(json_file_path, \"r\") as json_file:\n            data = json.load(json_file)\n            for user in data[\"admins\"]:\n                if user[\"email\"] == email:\n                    return user\n        return None\n    except Exception as e:\n        st.error(f\"Error getting user information: {e}\")",
        "detail": "admin",
        "documentation": {}
    },
    {
        "label": "render_dashboard",
        "kind": 2,
        "importPath": "admin",
        "description": "admin",
        "peekOfCode": "def render_dashboard(user_info, json_file_path=\"admin.json\"):\n    try:\n        # add profile picture\n        st.title(f\"Welcome to the Dashboard, {user_info['name']}!\")\n        st.subheader(\"Admin Information:\")\n        st.write(f\"Name: {user_info['name']}\")\n        st.write(f\"Sex: {user_info['sex']}\")\n        st.write(f\"Age: {user_info['age']}\")\n    except Exception as e:\n        st.error(f\"Error rendering dashboard: {e}\")",
        "detail": "admin",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "admin",
        "description": "admin",
        "peekOfCode": "def main(json_file_path=\"admin.json\"):\n    st.sidebar.title(\"COGITO - Mental Health Assistant\")\n    page = st.sidebar.radio(\n        \"Go to\",\n        (\n            \"Signup/Login\",\n            \"Dashboard\",\n            \"View Patient Details\",\n        ),\n        key=\"COGITO - Mental Health Assistant\",",
        "detail": "admin",
        "documentation": {}
    },
    {
        "label": "session_state",
        "kind": 5,
        "importPath": "admin",
        "description": "admin",
        "peekOfCode": "session_state = st.session_state\nif \"user_index\" not in st.session_state:\n    st.session_state[\"user_index\"] = 0\ndef signup(json_file_path=\"admin.json\"):\n    st.title(\"Signup Page\")\n    with st.form(\"signup_form\"):\n        st.write(\"Fill in the details below to create an account:\")\n        name = st.text_input(\"Name:\")\n        email = st.text_input(\"Email:\")\n        age = st.number_input(\"Age:\", min_value=0, max_value=120)",
        "detail": "admin",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def main():\n    st.title(\"COGITO - Mental Health Assistant\")\n    st.write(\"Welcome to COGITO, a mental health assistant that helps you track your mental health and provides you with resources to improve it.\")\n    page = st.radio(\n        \"Login or Signup as:\",\n        (\"Admin\", \"Patient\"),        key=\"login_signup\",\n    )\n    if st.button(\"Login\"):\n        if page == \"Admin\":\n            os.system('streamlit run admin.py')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "mental_health_assistant",
        "kind": 2,
        "importPath": "patient",
        "description": "patient",
        "peekOfCode": "def mental_health_assistant(name, previous_question=None, previous_answer=None):\n    try:\n        client = OpenAI(\n            api_key=os.environ.get(\"OPENAI_API_KEY\"),\n        )\n        if previous_question is None or previous_answer is None:\n            prompt = f\"\"\"\n            As a mental health adviser, your role is to offer a secure environment for individuals to freely express their thoughts and emotions. You acknowledge the difficulty in seeking assistance and reassure them of your unwavering support. With empathy and without judgment, you are committed to helping them face their mental health challenges. Your approach involves active listening, understanding, and providing thoughtful guidance. By asking pertinent questions, you aim to grasp each individual's unique mental health needs and offer the necessary support. Your goal is to ensure they feel validated, supported, and comprehended, and asking them questions to understand their mental health status as they navigate their journey towards well-being.\n            \"\"\"\n        else:",
        "detail": "patient",
        "documentation": {}
    },
    {
        "label": "generate_medical_report",
        "kind": 2,
        "importPath": "patient",
        "description": "patient",
        "peekOfCode": "def generate_medical_report(name, previous_questions=None, previous_responses=None):\n    try:\n        client = OpenAI(\n            api_key=os.environ.get(\"OPENAI_API_KEY\"),\n        )\n        # Construct the prompt\n        prompt = f\"Patient: {name}\\n\\n\"\n        # If previous questions and responses are provided, append them to the prompt\n        if previous_questions and previous_responses:\n            for question, response in zip(previous_questions, previous_responses):",
        "detail": "patient",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "patient",
        "description": "patient",
        "peekOfCode": "def signup(json_file_path=\"patients.json\"):\n    st.title(\"Signup Page\")\n    with st.form(\"signup_form\"):\n        st.write(\"Fill in the details below to create an account:\")\n        name = st.text_input(\"Name:\")\n        email = st.text_input(\"Email:\")\n        age = st.number_input(\"Age:\", min_value=0, max_value=120)\n        sex = st.radio(\"Sex:\", (\"Male\", \"Female\", \"Other\"))\n        password = st.text_input(\"Password:\", type=\"password\")\n        confirm_password = st.text_input(\"Confirm Password:\", type=\"password\")",
        "detail": "patient",
        "documentation": {}
    },
    {
        "label": "check_login",
        "kind": 2,
        "importPath": "patient",
        "description": "patient",
        "peekOfCode": "def check_login(username, password, json_file_path=\"patients.json\"):\n    try:\n        with open(json_file_path, \"r\") as json_file:\n            data = json.load(json_file)\n        for user in data[\"patients\"]:\n            if user[\"email\"] == username and user[\"password\"] == password:\n                session_state[\"logged_in\"] = True\n                session_state[\"user_info\"] = user\n                st.success(\"Login successful!\")\n                return user",
        "detail": "patient",
        "documentation": {}
    },
    {
        "label": "initialize_database",
        "kind": 2,
        "importPath": "patient",
        "description": "patient",
        "peekOfCode": "def initialize_database(json_file_path=\"patients.json\"):\n    try:\n        if not os.path.exists(json_file_path):\n            data = {\"patients\": []}\n            with open(json_file_path, \"w\") as json_file:\n                json.dump(data, json_file)\n    except Exception as e:\n        print(f\"Error initializing database: {e}\")\ndef create_account(\n    name,",
        "detail": "patient",
        "documentation": {}
    },
    {
        "label": "create_account",
        "kind": 2,
        "importPath": "patient",
        "description": "patient",
        "peekOfCode": "def create_account(\n    name,\n    email,\n    age,\n    sex,\n    password,\n    json_file_path=\"patients.json\",\n):\n    try:\n        # Check if the JSON file exists or is empty",
        "detail": "patient",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "patient",
        "description": "patient",
        "peekOfCode": "def login(json_file_path=\"patients.json\"):\n    st.title(\"Login Page\")\n    username = st.text_input(\"Username:\")\n    password = st.text_input(\"Password:\", type=\"password\")\n    login_button = st.button(\"Login\")\n    if login_button:\n        user = check_login(username, password, json_file_path)\n        if user is not None:\n            session_state[\"logged_in\"] = True\n            session_state[\"user_info\"] = user",
        "detail": "patient",
        "documentation": {}
    },
    {
        "label": "get_user_info",
        "kind": 2,
        "importPath": "patient",
        "description": "patient",
        "peekOfCode": "def get_user_info(email, json_file_path=\"patients.json\"):\n    try:\n        with open(json_file_path, \"r\") as json_file:\n            data = json.load(json_file)\n            for user in data[\"patients\"]:\n                if user[\"email\"] == email:\n                    return user\n        return None\n    except Exception as e:\n        st.error(f\"Error getting user information: {e}\")",
        "detail": "patient",
        "documentation": {}
    },
    {
        "label": "render_dashboard",
        "kind": 2,
        "importPath": "patient",
        "description": "patient",
        "peekOfCode": "def render_dashboard(user_info, json_file_path=\"patients.json\"):\n    try:\n        # add profile picture\n        st.title(f\"Welcome to the Dashboard, {user_info['name']}!\")\n        st.subheader(\"User Information:\")\n        st.write(f\"Name: {user_info['name']}\")\n        st.write(f\"Sex: {user_info['sex']}\")\n        st.write(f\"Age: {user_info['age']}\")\n        # Check if medical report exists\n        if user_info[\"report\"] is not None:",
        "detail": "patient",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "patient",
        "description": "patient",
        "peekOfCode": "def main(json_file_path=\"patients.json\"):\n    st.sidebar.title(\"COGITO - Mental Health Assistant\")\n    page = st.sidebar.radio(\n        \"Go to\",\n        (\n            \"Signup/Login\",\n            \"Dashboard\",\n            \"Take a mental health test\",\n            \"Breathe-in, Breathe-out (Meditation)\",\n        ),",
        "detail": "patient",
        "documentation": {}
    },
    {
        "label": "session_state",
        "kind": 5,
        "importPath": "patient",
        "description": "patient",
        "peekOfCode": "session_state = st.session_state\nif \"user_index\" not in st.session_state:\n    st.session_state[\"user_index\"] = 0\ndef signup(json_file_path=\"patients.json\"):\n    st.title(\"Signup Page\")\n    with st.form(\"signup_form\"):\n        st.write(\"Fill in the details below to create an account:\")\n        name = st.text_input(\"Name:\")\n        email = st.text_input(\"Email:\")\n        age = st.number_input(\"Age:\", min_value=0, max_value=120)",
        "detail": "patient",
        "documentation": {}
    }
]